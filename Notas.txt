═══════════════════════════════════════════════════════════════════════════════
                    CRUD DE EMPLEADOS - GUÍA DE APRENDIZAJE
═══════════════════════════════════════════════════════════════════════════════

📁 PROYECTO LARAVEL: C:\laragon\www\Project01

═══════════════════════════════════════════════════════════════════════════════
                     ✅ PASO 1 COMPLETADO: MIGRACIONES
═══════════════════════════════════════════════════════════════════════════════

🎯 CONCEPTOS APRENDIDOS:
─────────────────────────────────────────────────────────────────────────────

1. TIPOS DE COLUMNAS:
   • $table->id()                    → Clave primaria autoincremental
   • $table->string('nombre')         → Texto corto (máx 255 caracteres)
   • $table->text('descripcion')      → Texto largo (sin límite)
   • $table->decimal('salario', 10, 2)→ Números decimales (10 dígitos, 2 decimales)
   • $table->date('fecha')            → Solo fecha (YYYY-MM-DD)
   • $table->timestamps()             → Crea created_at y updated_at automáticamente

2. MODIFICADORES:
   • ->nullable()    → El campo puede ser NULL (opcional)
   • ->unique()      → El valor no se puede repetir
   • ->default(val)  → Valor por defecto

3. CLAVES FORÁNEAS (Foreign Keys):
   • $table->foreignId('departamento_id')
           ->constrained('departamentos')
           ->onDelete('cascade');

   ¿Qué hace?
   - Crea una columna 'departamento_id'
   - La relaciona con la tabla 'departamentos'
   - Si eliminas un departamento, se eliminan sus empleados (cascade)

4. TABLA PIVOTE (relación muchos a muchos):
   • Conecta dos tablas que tienen relación múltiple
   • Ejemplo: Un empleado puede estar en varios proyectos
            Un proyecto puede tener varios empleados


═══════════════════════════════════════════════════════════════════════════════
                     ✅ MIGRACIONES EJECUTADAS EXITOSAMENTE
═══════════════════════════════════════════════════════════════════════════════

✓ Comando ejecutado: php artisan migrate

📊 TABLAS CREADAS EN LA BASE DE DATOS:
   • users
   • password_reset_tokens
   • failed_jobs
   • personal_access_tokens
   • departamentos ✓ (nombre, descripcion nullable)
   • puestos ✓ (nombre, descripcion nullable, salario_base)
   • empleados ✓ (nombre, apellido, email unique, telefono, fecha_ingreso, salario)
   • proyectos ✓ (nombre, descripcion nullable, fecha_inicio, fecha_fin nullable, presupuesto nullable)
   • empleado_proyecto ✓ (tabla pivote: empleado_id, proyecto_id, rol nullable)


═══════════════════════════════════════════════════════════════════════════════
                     ✅ PASO 2 COMPLETADO: MODELOS ELOQUENT
═══════════════════════════════════════════════════════════════════════════════

🎯 ¿QUÉ SON LOS MODELOS?
─────────────────────────────────────────────────────────────────────────────
Los modelos son clases PHP que representan tus tablas y te permiten trabajar
con la base de datos sin escribir SQL. Laravel usa "Eloquent ORM" para esto.

🔧 COMPONENTES DE UN MODELO:
─────────────────────────────────────────────────────────────────────────────

1. FILLABLE (Asignación masiva):
   protected $fillable = ['nombre', 'email', 'salario'];

   → Permite crear registros rápidamente:
   Empleado::create(['nombre' => 'Juan', 'email' => 'juan@example.com']);

2. CASTS (Conversión de tipos):
   protected $casts = [
       'fecha_ingreso' => 'date',
       'salario' => 'decimal:2'
   ];

   → Convierte automáticamente los valores:
   $empleado->fecha_ingreso será un objeto Carbon (fácil de manejar fechas)
   $empleado->salario será un decimal con 2 decimales

3. RELACIONES:
   ┌─────────────────────────────────────────────────────────────────────────┐
   │ belongsTo (pertenece a)                                                 │
   │ → Un empleado PERTENECE a un departamento                               │
   │ → Un empleado PERTENECE a un puesto                                     │
   │                                                                          │
   │ Uso: $empleado->departamento → Obtiene el departamento del empleado    │
   └─────────────────────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────────────────────┐
   │ hasMany (tiene muchos)                                                  │
   │ → Un departamento TIENE MUCHOS empleados                                │
   │ → Un puesto TIENE MUCHOS empleados                                      │
   │                                                                          │
   │ Uso: $departamento->empleados → Obtiene todos los empleados            │
   └─────────────────────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────────────────────┐
   │ belongsToMany (muchos a muchos)                                         │
   │ → Un empleado puede estar en VARIOS proyectos                           │
   │ → Un proyecto puede tener VARIOS empleados                              │
   │                                                                          │
   │ Uso: $empleado->proyectos → Obtiene todos los proyectos                │
   │      $empleado->proyectos()->attach($proyecto_id) → Asignar             │
   │      $empleado->proyectos()->detach($proyecto_id) → Quitar              │
   └─────────────────────────────────────────────────────────────────────────┘

📝 MODELOS CREADOS:
─────────────────────────────────────────────────────────────────────────────

1. Departamento.php
   • Campos: nombre, descripcion (nullable)
   • Relación: hasMany(Empleado)

2. Puesto.php
   • Campos: nombre, descripcion (nullable), salario_base
   • Relación: hasMany(Empleado)

3. Empleado.php
   • Campos: nombre, apellido, email (unique), telefono, fecha_ingreso, salario
   • Relaciones:
     - belongsTo(Departamento)
     - belongsTo(Puesto)
     - belongsToMany(Proyecto)

4. Proyecto.php
   • Campos: nombre, descripcion (nullable), fecha_inicio, fecha_fin (nullable), presupuesto (nullable)
   • Relación: belongsToMany(Empleado)

5. Tabla Pivote: empleado_proyecto
   • Campos: empleado_id, proyecto_id, rol (nullable), timestamps
   • Conecta empleados con proyectos (relación muchos a muchos)


💡 EJEMPLOS DE USO:
─────────────────────────────────────────────────────────────────────────────

// Obtener un empleado con su departamento y puesto
$empleado = Empleado::with('departamento', 'puesto')->find(1);
echo $empleado->nombre;                    // Juan Pérez
echo $empleado->departamento->nombre;       // Ventas
echo $empleado->puesto->nombre;             // Gerente

// Obtener todos los empleados de un departamento
$ventas = Departamento::find(1);
foreach($ventas->empleados as $empleado) {
    echo $empleado->nombre;
}

// Asignar un empleado a un proyecto
$empleado = Empleado::find(1);
$proyecto = Proyecto::find(1);
$empleado->proyectos()->attach($proyecto->id);


═══════════════════════════════════════════════════════════════════════════════
                     ✅ PASO 3 COMPLETADO: CONTROLADORES
═══════════════════════════════════════════════════════════════════════════════

🎯 ¿QUÉ SON LOS CONTROLADORES?
─────────────────────────────────────────────────────────────────────────────
Los controladores son clases que manejan la LÓGICA de tu aplicación. Reciben
las peticiones HTTP, procesan datos, interactúan con los modelos y retornan
las respuestas (vistas o JSON).

📌 RESOURCE CONTROLLER:
Un controlador tipo "resource" incluye automáticamente los 7 métodos CRUD:

┌─────────────┬──────────┬─────────────────────┬──────────────────────────────┐
│   MÉTODO    │  VERBO   │       RUTA          │         FUNCIÓN              │
├─────────────┼──────────┼─────────────────────┼──────────────────────────────┤
│ index()     │ GET      │ /empleados          │ Listar todos los empleados   │
│ create()    │ GET      │ /empleados/create   │ Mostrar formulario de crear  │
│ store()     │ POST     │ /empleados          │ Guardar nuevo empleado       │
│ show()      │ GET      │ /empleados/{id}     │ Ver detalles de un empleado  │
│ edit()      │ GET      │ /empleados/{id}/edit│ Mostrar formulario de editar │
│ update()    │ PUT/PATCH│ /empleados/{id}     │ Actualizar empleado          │
│ destroy()   │ DELETE   │ /empleados/{id}     │ Eliminar empleado            │
└─────────────┴──────────┴─────────────────────┴──────────────────────────────┘


🔧 CONCEPTOS IMPORTANTES EN LOS CONTROLADORES:
─────────────────────────────────────────────────────────────────────────────

1. VALIDACIÓN DE DATOS:
   $validated = $request->validate([
       'nombre' => 'required|string|max:255',
       'email' => 'required|email|unique:empleados',
       'salario' => 'required|numeric|min:0'
   ]);

   → Reglas de validación:
   • required     → Campo obligatorio
   • string       → Debe ser texto
   • max:255      → Máximo 255 caracteres
   • email        → Debe ser formato email válido
   • unique:tabla → No puede repetirse en la tabla
   • numeric      → Debe ser numérico
   • min:0        → Valor mínimo
   • exists:tabla,id → Debe existir en otra tabla

2. EAGER LOADING (Carga anticipada):
   $empleados = Empleado::with('departamento', 'puesto')->get();

   → Evita el problema N+1 (hacer muchas consultas a la base de datos)
   → Carga las relaciones en una sola consulta optimizada

3. WITHCOUNT (Contar relaciones):
   $departamentos = Departamento::withCount('empleados')->get();

   → Agrega una propiedad empleados_count a cada departamento
   → Útil para mostrar "Ventas (5 empleados)"

4. REDIRECCIÓN CON MENSAJES:
   return redirect()->route('empleados.index')
       ->with('success', 'Empleado creado exitosamente.');

   → Redirige a otra ruta
   → Envía un mensaje que puedes mostrar en la vista

5. ATTACH, DETACH, SYNC (Relaciones muchos a muchos):
   • attach($id)   → Asignar empleado a proyecto
   • detach($id)   → Quitar empleado de proyecto
   • sync([$ids])  → Reemplaza todas las relaciones con las nuevas


📝 CONTROLADORES CREADOS:
─────────────────────────────────────────────────────────────────────────────

1. DepartamentoController.php
   ✓ CRUD completo para departamentos
   ✓ Validación de nombre único
   ✓ Previene eliminar departamentos con empleados asignados
   ✓ Muestra conteo de empleados por departamento

2. PuestoController.php
   ✓ CRUD completo para puestos
   ✓ Validación de nombre único y salario base
   ✓ Previene eliminar puestos con empleados asignados
   ✓ Muestra conteo de empleados por puesto

3. EmpleadoController.php ⭐ (EL MÁS IMPORTANTE)
   ✓ CRUD completo para empleados
   ✓ Validación de email único
   ✓ Manejo de relaciones: departamento, puesto, proyectos
   ✓ Asignación múltiple de proyectos
   ✓ Sincronización de proyectos al actualizar

4. ProyectoController.php
   ✓ CRUD completo para proyectos
   ✓ Validación de fechas (fin >= inicio)
   ✓ Asignación múltiple de empleados
   ✓ Muestra empleados con departamentos y puestos


�️ RUTAS REGISTRADAS:
─────────────────────────────────────────────────────────────────────────────

En routes/web.php se registraron todas las rutas automáticamente:

Route::resource('departamentos', DepartamentoController::class);
Route::resource('puestos', PuestoController::class);
Route::resource('empleados', EmpleadoController::class);
Route::resource('proyectos', ProyectoController::class);

Cada línea crea automáticamente las 7 rutas CRUD mencionadas arriba.


💡 VERIFICAR RUTAS CREADAS:
─────────────────────────────────────────────────────────────────────────────
Comando: php artisan route:list

Esto mostrará TODAS las rutas disponibles en tu aplicación.


═══════════════════════════════════════════════════════════════════════════════
                     ✅ PASO 4 COMPLETADO: VISTAS BLADE + CSS
═══════════════════════════════════════════════════════════════════════════════

🎯 ¿QUÉ SON LAS VISTAS BLADE?
─────────────────────────────────────────────────────────────────────────────
Blade es el motor de plantillas de Laravel. Te permite escribir HTML mezclado
con PHP de forma elegante y crear componentes reutilizables.

🔧 SINTAXIS BLADE BÁSICA:
─────────────────────────────────────────────────────────────────────────────

1. MOSTRAR VARIABLES:
   {{ $variable }}                    → Escapa HTML automáticamente (seguro)
   {!! $html !!}                      → No escapa HTML (usar con cuidado)

2. ESTRUCTURAS DE CONTROL:
   @if($condicion)
       <p>Es verdadero</p>
   @else
       <p>Es falso</p>
   @endif

   @foreach($empleados as $empleado)
       <p>{{ $empleado->nombre }}</p>
   @endforeach

3. LAYOUTS Y SECCIONES:
   @extends('layouts.app')            → Hereda de una plantilla
   @section('title', 'Mi Título')     → Define una sección inline
   @section('content')                → Comienza una sección
       <!-- Contenido aquí -->
   @endsection                        → Termina la sección
   @yield('content')                  → Muestra el contenido de una sección

4. DIRECTIVAS ÚTILES:
   @csrf                              → Token de seguridad en formularios
   @method('PUT')                     → Simula método HTTP PUT/DELETE
   route('empleados.index')           → Genera URL de una ruta nombrada
   old('nombre')                      → Recupera valor anterior del formulario


📐 ESTRUCTURA DE ARCHIVOS CREADOS:
─────────────────────────────────────────────────────────────────────────────
z
resources/
├── views/
│   ├── layouts/
│   │   └── app.blade.php          → Layout principal (plantilla base)
│   ├── empleados/
│   │   ├── index.blade.php        → Listar empleados
│   │   ├── create.blade.php       → Formulario crear
│   │   ├── edit.blade.php         → Formulario editar
│   │   └── show.blade.php         → Ver detalles
│   ├── departamentos/
│   │   ├── index.blade.php        → Listar (diseño tarjetas)
│   │   ├── create.blade.php
│   │   ├── edit.blade.php
│   │   └── show.blade.php
│   ├── puestos/
│   │   ├── index.blade.php        → Listar (tabla)
│   │   ├── create.blade.php
│   │   ├── edit.blade.php
│   │   └── show.blade.php
│   ├── proyectos/
│   │   ├── index.blade.php        → Listar (diseño tarjetas)
│   │   ├── create.blade.php
│   │   ├── edit.blade.php
│   │   └── show.blade.php
│   └── welcome.blade.php          → Dashboard principal

public/
└── css/
    └── styles.css                 → Estilos personalizados


🎨 SISTEMA DE DISEÑO CREADO:
─────────────────────────────────────────────────────────────────────────────

1. VARIABLES CSS (Paleta de Colores):
   --primary: #3b82f6       (Azul)
   --secondary: #8b5cf6     (Púrpura)
   --success: #10b981       (Verde)
   --danger: #ef4444        (Rojo)
   --warning: #f59e0b       (Naranja)

2. COMPONENTES PRINCIPALES:

   • HEADER:
     - Fondo degradado (primary → secondary)
     - Menú de navegación responsive
     - Links activos destacados

   • CARDS (Tarjetas):
     - Fondo blanco con sombra
     - Hover effect (elevación)
     - Header con título y acciones

   • BOTONES:
     .btn-primary    → Acciones principales
     .btn-success    → Guardar/Confirmar
     .btn-danger     → Eliminar
     .btn-secondary  → Cancelar/Ver

   • TABLAS:
     - Header con degradado
     - Hover effect en filas
     - Responsive (scroll horizontal en móvil)

   • FORMULARIOS:
     - Labels con indicador de requerido (*)
     - Inputs con borde y hover effect
     - Focus con borde azul + sombra
     - Grid layout para campos en 2 columnas

   • BADGES (Etiquetas):
     .badge-primary   → Información general
     .badge-success   → Éxito/Activo
     .badge-warning   → Advertencia
     .badge-danger    → Error/Crítico

   • ALERTAS:
     - Animación slideDown al aparecer
     - Colores según tipo (success/error)
     - Borde izquierdo de color


📊 CARACTERÍSTICAS DEL DISEÑO:
─────────────────────────────────────────────────────────────────────────────

✓ RESPONSIVE: Se adapta a móviles, tablets y desktop
✓ ANIMACIONES: Transiciones suaves en hover y focus
✓ ACCESIBILIDAD: Colores con buen contraste
✓ CONSISTENCIA: Mismo estilo en todas las vistas
✓ FEEDBACK VISUAL: Mensajes de éxito/error visibles
✓ NAVEGACIÓN INTUITIVA: Breadcrumbs y botones claros


💡 CONCEPTOS IMPORTANTES DE BLADE:
─────────────────────────────────────────────────────────────────────────────

1. LAYOUT MAESTRO (app.blade.php):
   - Define la estructura HTML base
   - Incluye header, nav, content y footer
   - Usa @yield para inyectar contenido

2. VISTAS QUE HEREDAN:
   - Usan @extends('layouts.app')
   - Definen @section('content')
   - Pueden sobrescribir el título con @section('title')

3. FORMULARIOS:
   - Siempre incluyen @csrf (seguridad)
   - PUT/DELETE usan @method('PUT')
   - old('campo') recupera valores tras error de validación

4. RUTAS NOMBRADAS:
   route('empleados.index')           → /empleados
   route('empleados.create')          → /empleados/create
   route('empleados.show', $empleado) → /empleados/1

5. MENSAJES FLASH:
   session('success')  → Mensaje de éxito
   session('error')    → Mensaje de error
   $errors->any()      → Hay errores de validación


🎬 FLUJO COMPLETO DE UN CRUD:
─────────────────────────────────────────────────────────────────────────────

1. Usuario visita /empleados
   → EmpleadoController@index
   → Consulta: Empleado::with('departamento', 'puesto')->get()
   → Retorna: view('empleados.index', compact('empleados'))
   → Muestra tabla con todos los empleados

2. Usuario hace clic en "Nuevo Empleado"
   → EmpleadoController@create
   → Consulta departamentos y puestos para los select
   → Retorna formulario vacío

3. Usuario llena el formulario y envía
   → EmpleadoController@store
   → Valida los datos
   → Crea el registro: Empleado::create($validated)
   → Redirige con mensaje: ->with('success', '...')

4. Usuario ve el mensaje de éxito en la lista


🚀 PARA PROBAR LA APLICACIÓN:
─────────────────────────────────────────────────────────────────────────────

1. Inicia el servidor:
   php artisan serve

2. Abre el navegador en:
   http://localhost:8000

3. Navega por las secciones:
   • Dashboard (inicio)
   • Empleados
   • Departamentos
   • Puestos
   • Proyectos

4. Prueba crear, editar y eliminar registros


═══════════════════════════════════════════════════════════════════════════════
                     🎉 PROYECTO COMPLETADO AL 100%
═══════════════════════════════════════════════════════════════════════════════

✅ PASO 1: Migraciones → Estructura de base de datos
✅ PASO 2: Modelos → Lógica de relaciones
✅ PASO 3: Controladores → Lógica de negocio
✅ PASO 4: Vistas + CSS → Interfaz de usuario
✅ PASO 5: Ajustes y correcciones → Base de datos optimizada


═══════════════════════════════════════════════════════════════════════════════
              🔧 AJUSTES REALIZADOS - NULLABLE Y CAMPOS OPCIONALES
═══════════════════════════════════════════════════════════════════════════════

Durante las pruebas del sistema, se realizaron los siguientes ajustes para
hacer la aplicación más flexible y evitar errores:

🔄 CAMBIOS EN LAS MIGRACIONES:
─────────────────────────────────────────────────────────────────────────────

1. TABLA: puestos
   ✓ Agregada columna: descripcion (nullable)
   → Permite crear puestos sin necesidad de descripción

2. TABLA: empleados
   ✓ Agregada columna: apellido
   ✓ Cambiada columna: correo → email (unique)
   ✓ Agregada columna: salario (decimal 10,2)
   → Estructura completa del empleado con validación de email único

3. TABLA: proyectos
   ✓ Modificada columna: descripcion → nullable
   ✓ Agregada columna: presupuesto (decimal 12,2, nullable)
   → Permite crear proyectos sin descripción o presupuesto definido

4. TABLA: empleado_proyecto
   ✓ Modificada columna: rol → nullable
   → Permite asignar empleados a proyectos sin especificar su rol inicial


📋 ESTRUCTURA FINAL DE LAS TABLAS:
─────────────────────────────────────────────────────────────────────────────

departamentos:
├── id (primary key)
├── nombre (string, required)
├── descripcion (text, nullable) ✨
├── created_at
└── updated_at

puestos:
├── id (primary key)
├── nombre (string, required)
├── descripcion (text, nullable) ✨
├── salario_base (decimal 10,2, required)
├── created_at
└── updated_at

empleados:
├── id (primary key)
├── nombre (string, required)
├── apellido (string, required) ✨
├── email (string, unique, required) ✨
├── telefono (string, required)
├── fecha_ingreso (date, required)
├── salario (decimal 10,2, required) ✨
├── departamento_id (foreign key, required)
├── puesto_id (foreign key, required)
├── created_at
└── updated_at

proyectos:
├── id (primary key)
├── nombre (string, required)
├── descripcion (text, nullable) ✨
├── fecha_inicio (date, required)
├── fecha_fin (date, nullable)
├── presupuesto (decimal 12,2, nullable) ✨
├── created_at
└── updated_at

empleado_proyecto:
├── id (primary key)
├── empleado_id (foreign key, required)
├── proyecto_id (foreign key, required)
├── rol (string, nullable) ✨
├── created_at
└── updated_at


💡 LECCIONES APRENDIDAS:
─────────────────────────────────────────────────────────────────────────────

1. NULLABLE es tu amigo:
   → No todos los campos necesitan ser obligatorios desde el inicio
   → Permite mayor flexibilidad al usuario
   → Se puede llenar la información después

2. CONSISTENCIA en nombres:
   → Usar 'email' en lugar de 'correo' para mantener el estándar
   → Los nombres de columnas deben coincidir entre migración y modelo

3. VALIDACIÓN ÚNICA:
   → El email debe ser único para evitar duplicados
   → PostgreSQL valida esto a nivel de base de datos

4. COMANDOS IMPORTANTES:
   php artisan migrate           → Ejecuta nuevas migraciones
   php artisan migrate:fresh     → Elimina y recrea todas las tablas
   php artisan migrate:rollback  → Revierte la última migración
   php artisan config:clear      → Limpia caché de configuración


🗄️ CONFIGURACIÓN DE BASE DE DATOS (PostgreSQL):
─────────────────────────────────────────────────────────────────────────────

.env configurado con:
DB_CONNECTION=pgsql
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=project_01
DB_USERNAME=agroince_pr
DB_PASSWORD=Marce1234*


📚 PRÓXIMOS PASOS OPCIONALES:
─────────────────────────────────────────────────────────────────────────────

1. SEEDERS: Poblar la base de datos con datos de prueba
   php artisan make:seeder DepartamentoSeeder

2. MIDDLEWARE: Agregar autenticación
   php artisan make:middleware CheckAdmin

3. API: Crear endpoints REST
   Route::apiResource('api/empleados', EmpleadoApiController::class);

4. VALIDACIÓN PERSONALIZADA: Crear Form Requests
   php artisan make:request StoreEmpleadoRequest

5. PAGINACIÓN: Limitar resultados en las listas
   $empleados = Empleado::paginate(15);

6. BÚSQUEDA Y FILTROS: Agregar formularios de búsqueda

7. EXPORTAR A EXCEL: Usar maatwebsite/excel

8. GRÁFICAS: Integrar Chart.js para estadísticas


💪 ¡FELICITACIONES! Has creado tu primer CRUD completo en Laravel con:
   • Base de datos relacional
   • Sistema de vistas moderno
   • Validación de datos
   • Interfaz responsive
   • Código limpio y organizado




